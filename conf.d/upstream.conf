# Upstream for App1 (Flask - single instance)
upstream app1_backend {
    server app1:5000 max_fails=3 fail_timeout=30s;
    
    # Keep alive connections for better performance
    keepalive 32;
}

# Upstream for App2 (Node.js - load balanced across 3 instances)
upstream app2_backend {
    # Load balancing method: least_conn (least connections)
    # Alternatives: round_robin (default), ip_hash, hash
    least_conn;
    
    server app2:3000 max_fails=3 fail_timeout=30s weight=1;
    server app2_instance2:3000 max_fails=3 fail_timeout=30s weight=1;
    server app2_instance3:3000 max_fails=3 fail_timeout=30s weight=1;
    
    # Keep alive connections
    keepalive 32;
}

# You can add more upstreams here for different services
# Example with different load balancing strategies:
#
# upstream app3_backend {
#     # IP Hash - same client always goes to same server
#     ip_hash;
#     server app3_1:8000;
#     server app3_2:8000;
# }
#
# upstream app4_backend {
#     # Hash based on URI
#     hash $request_uri consistent;
#     server app4_1:9000;
#     server app4_2:9000;
# }